import maybe;
import ds/tree;
import ds/array;
import string;
import lingo/pegcode/driver;
import math/math;

Polynom(sum: Tree<PolyProd, int>);
PolyProd(prod: Tree<string, int>);
RationalFunction(num: Polynom, den: Polynom);
alg2rf(e: ArExp) -> RationalFunction;
rf2s(rf: RationalFunction) -> string;

sumPolynoms(l: Polynom, r: Polynom) -> Polynom;
multPolynoms(l: Polynom, r: Polynom) -> Polynom;
multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd;
p2s(p: Polynom) -> string;
pp2s(pp: PolyProd) -> string;

Rational(num: int, den: int);
multRationals(l: Rational, r: Rational) -> Rational;  
divRationals(l: Rational, r: Rational) -> Rational;  
sumRationals(l: Rational, r: Rational) -> Rational;
subRationals(l: Rational, r: Rational) -> Rational;
minusRational(r: Rational) -> Rational;
r2s(e: Rational) -> string;

p2s(e: Polynom) -> string {
    trim2(concatStrings(foldTree(e.sum, [], \k,v,acc -> concat(acc, [i2s(v) + pp2s(k) + " + "]))), " +");
}

rf2s(rf: RationalFunction) -> string {
    if (rf.den ==  Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))) {
        p2s(rf.num);
    } else {
        concatStrings(["(", p2s(rf.num) ,") / (", p2s(rf.den) ,")"]);
    }
}

pp2s(e: PolyProd) -> string {
    rtrim2(concatStrings(foldTree(e.prod , [], \k, v, acc -> concat(acc, [k + "^" + i2s(v) + " * "]))), "*");
}

multPolyProds(l: PolyProd, r: PolyProd) -> PolyProd {
    PolyProd(mergeTreeCustom(l.prod, r.prod, \k, lv, rv -> rv + lv));
}

alg2rf(e: ArExp) -> RationalFunction {
    rf = switch (e) {
        SumExp(l,r): sumRationalFunctions(alg2rf(l) , alg2rf(r));
        MultExp(l,r): multRationalFunctions(alg2rf(l), alg2rf(r));
        SubExp(l,r): subRationalFunctions(alg2rf(l), alg2rf(r));
        DivExp(l,r): divRationalFunctions(alg2rf(l), alg2rf(r));
        MinusExp(expr): minusRationalFunction(alg2rf(expr));
        IntExp(v): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(makeTree()), v)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
        VarExp(name): RationalFunction(
            Polynom(setTree(makeTree(), PolyProd(setTreeValues(makeTree(),[Pair(name, 1)])), 1)),
            Polynom(setTree(makeTree(), PolyProd(makeTree()), 1))
        );
    }
    rf2 = RationalFunction(filterPolynom(rf.num), filterPolynom(rf.den));
    polyGCD = gcd(coefGCD(rf2.num), coefGCD(rf2.den));
    rf3 = divRationalFunctionByInt(rf2, polyGCD);
    numGCD = coefGCD(rf3.num);
    rf3_num = divPolynomByInt(rf3.num, numGCD);
    if (rf3_num == rf3.den) {
        RationalFunction(Polynom(setTree(makeTree(), PolyProd(makeTree()), numGCD)), Polynom(setTree(makeTree(), PolyProd(makeTree()), 1)));
    } else {
        rf3;
    }
}

filterPolynom(p: Polynom) -> Polynom {
    Polynom(filterTree(p.sum, \k, v -> v != 0));
}

coefGCD(p: Polynom) -> int {
    initial = getTreeValues(p.sum)[0];
    foldTree(p.sum, initial, \k, v, acc -> gcd(acc,v));
}

divPolynomByInt(p: Polynom, c: int) -> Polynom {
    Polynom(mapTree(p.sum, \v -> v/c));
}

divRationalFunctionByInt(rf: RationalFunction, c: int) -> RationalFunction {
    RationalFunction(divPolynomByInt(rf.num, c), divPolynomByInt(rf.den, c));
}

sumRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), multPolynoms(r.num, l.den)), multPolynoms(l.den, r.den));
 }

subRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(sumPolynoms(multPolynoms(l.num, r.den), minusPolynom(multPolynoms(r.num, l.den))), multPolynoms(l.den, r.den));
 }

multRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(multPolynoms(l.num, r.num), multPolynoms(l.den, r.den));
 }

divRationalFunctions(l: RationalFunction, r: RationalFunction) -> RationalFunction {
     RationalFunction(multPolynoms(l.num, r.den), multPolynoms(l.den, r.num));
}

minusRationalFunction(rf: RationalFunction) -> RationalFunction {
     RationalFunction(minusPolynom(rf.num), rf.den);
}

sumPolynoms(l: Polynom, r: Polynom) {
    Polynom(mergeTreeCustom(l.sum, r.sum, \k, lv, rv -> lv + rv));
}

multPolynoms(l: Polynom, r: Polynom) {
    Polynom(foldTree(l.sum, makeTree(), \lp, lc, acc -> {
        foldTree(r.sum, acc, \rp, rc, ac -> {
            pp = multPolyProds(lp, rp);
            switch(lookupTree(ac, pp)) {
                Some(coef): setTree(ac, pp, coef + (lc * rc));
                None(): setTree(ac, pp, (lc * rc));
            }     
        });
    }));
}

minusPolynom(p: Polynom) -> Polynom {
     Polynom(mapTree(p.sum, \r -> -r));
}

multRationals(l: Rational, r: Rational) -> Rational {
    cdiv = gcd(l.num * r.num, l.den * r.den);
    Rational((l.num * r.num) / cdiv, (l.den * r.den) / cdiv);
}

minusRational(r: Rational) -> Rational{
     Rational(- r.num, r.den);
 }

divRationals(l: Rational, r: Rational) -> Rational {
    cdiv = gcd(l.num * r.den, l.den * r.num);
    Rational((l.num * r.den) / cdiv, (l.den * r.num) / cdiv);
}

sumRationals(l: Rational, r: Rational) -> Rational {
    if (l.den == r.den) {
        Rational(l.num + r.num, l.den);
    } else {
        cdiv = gcd(l.num * r.den + r.num * l.den, l.den * r.den);
        Rational((l.num * r.den + r.num * l.den) / cdiv, (l.den * r.den) / cdiv);
    }
}

subRationals(l: Rational, r: Rational) -> Rational {
    if (l.den == r.den) {
        if (l.num - r.num == 0) {
            Rational(l.num - r.num, 1);
        } else {
            Rational(l.num - r.num, l.den);
        }
    } else {
        cdiv = gcd(l.num * r.den - r.num * l.den, l.den * r.den);
        if (l.num * r.den - r.num * l.den == 0) { 
            Rational(l.num * r.den - r.num * l.den, 1);
        } else {
            Rational((l.num * r.den - r.num * l.den) / cdiv, (l.den * r.den) / cdiv);
        }
    }
}

r2s(e: Rational) -> string {
    if (e.den == 1) {
        i2s(e.num);
    } else {
        concatStrings([i2s(e.num), "/", i2s(e.den)]);
    }
}

ArExp ::= SumExp, MultExp, SubExp, DivExp, MinusExp, IntExp, VarExp;

SumExp(lhs:ArExp, rhs:ArExp);
MultExp(lhs:ArExp, rhs:ArExp);
SubExp(lhs:ArExp, rhs:ArExp);
DivExp(lhs:ArExp, rhs:ArExp);
MinusExp(expr: ArExp);
IntExp(val: int);
VarExp(name: string);

gram = "#include arexp.gram"

ar2s(e: ArExp) -> string{
    switch (e) {
        SumExp(left,right): concatStrings(["(",ar2s(left),"+",ar2s(right),")"]);
        MultExp(left,right): concatStrings(["(",ar2s(left),"*",ar2s(right),")"]);
        SubExp(left,right): concatStrings(["(",ar2s(left),"-",ar2s(right),")"]);
        DivExp(left,right): concatStrings(["(",ar2s(left),"/",ar2s(right),")"]);
        MinusExp(expr): concatStrings(["-",ar2s(expr)]);
        IntExp(value): i2s(value);
        VarExp(name): name;
    }
}

s2ar(s: string) -> ArExp {
    parser = compilePegGrammar(gram);
    parsic(parser, s, SemanticActions(setTree(defaultPegActions.t, "makeIntExp", \str -> IntExp(s2i(str[0])))));
}

eval(expr: ArExp, var_vals: Tree<string, int>) -> Maybe<int> {
    switch (expr) {
        SumExp(l, r): 
            switch (eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft + rht);
                                None(): None();
                            };
                None(): None();
            };
        MultExp(l, r): 
            switch(eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft * rht);
                                None(): None();
                            };
                None(): None();
            };
        SubExp(l, r): 
            switch (eval(l, var_vals)) {
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): Some(lft - rht);
                                None(): None();
                            };
                None(): None();
            };
        DivExp(l, r): 
            switch (eval(l, var_vals)){
                Some(lft): switch (eval(r, var_vals)) {
                                Some(rht): if (rht == 0) {
                                                None();
                                            } else {
                                                Some(lft / rht);
                                            };
                                None(): None();
                };
                None(): None();
            };
        MinusExp(expression): 
            eval(SubExp(IntExp(0), expression), var_vals);
        IntExp(v): 
            Some(v);
        VarExp(name): 
            switch(lookupTree(var_vals, name)) {
                Some(v): Some(v);
                None(): None();
            };
    }
}

diff(expr: ArExp, var: string) -> ArExp {
    switch (expr) {
        SumExp(l, r): 
            SumExp(diff(l, var), diff(r, var));
        SubExp(l,r): 
            SubExp(diff(l, var), diff(r, var));
        MultExp(l,r): 
            SumExp(MultExp(diff(l, var), r), MultExp(l, diff(r, var)));
        DivExp(l,r): 
            DivExp(SubExp(MultExp(diff(l, var), r), MultExp(l, diff(r, var))), MultExp(r, r));
        MinusExp(expression):
            MinusExp(diff(expression, var));
        IntExp(v): 
            IntExp(0);
        VarExp(name):
            if (name == var) {
                IntExp(1);
            } else {
                IntExp(0);
            }; 
    }
}

simplify(expr) -> ArExp {
    a = switch (expr) {
        SumExp(l, r):
            if (l == IntExp(0) && r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == IntExp(0)) {
                r;
            }
            else if (r == IntExp(0)) {
                l;
            }
            else {
                SumExp(simplify(l), simplify(r));
            };
        SubExp(l, r): 
            if (l == IntExp(0) && r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == r ) {
                IntExp(0);
            }
            else if (l == IntExp(0)) {
                MinusExp(r);
            }
            else if (r == IntExp(0)) {
                l;
            }
            else {
                SubExp(simplify(l), simplify(r));
            };
        MultExp(l, r): 
            if (l == IntExp(0) || r == IntExp(0)) {
                IntExp(0);
            } 
            else if (l == IntExp(1)) {
                r;
            }
            else if (r == IntExp(1)) {
                l;
            } 
            else {
                MultExp(simplify(l), simplify(r));
            };
        DivExp(l, r): 
            if (l == r) {
                IntExp(1);
            }
            else if (r == IntExp(1)) {
                l;
            } 
            else {
                DivExp(simplify(l), simplify(r));
            };
        MinusExp(expression): 
            MinusExp(simplify(expression));
        IntExp(v): 
            IntExp(v);
        VarExp(name): 
            VarExp(name); 
    }
    if (a == expr){
        a;
    } else {
        simplify(a);
    }
}

main() {
    expr: ArExp = SumExp(DivExp(IntExp(3), IntExp(-3)), MultExp(IntExp(1), SumExp(IntExp(3), VarExp("x"))));
    println(ar2s(expr));
    newExpr = "((3/3)+(1*(3+x)))";
    println(s2ar(newExpr));

    vars = setTree(makeTree(), "x", 10);
    switch (eval(expr, vars)) {
        Some(v): println(ar2s(expr) + " = " + i2s(v));
        None(): println("Failed to evaluate this expression!");
    }
    
    expr4 = s2ar("(1 / x)");
    println(ar2s(diff(expr4, "x")));

    println(ar2s(simplify(diff(expr4, "x"))));
    println(ar2s(simplify(simplify(diff(expr4, "x")))));

    r1 = Rational(1, 4);
    r2 = Rational(1, 4);
    println(r2s(sumRationals(r1, r2)));
    println(r2s(subRationals(r1, r2)));
    println(r2s(multRationals(r1, r2)));
    println(r2s(divRationals(r1, r2)));

    pp1 = PolyProd(setTreeValues(makeTree(), [Pair("x", 1), Pair("y", 2), Pair("z", 3)]));
    pp2 = PolyProd(setTreeValues(makeTree(), [Pair("x", 3), Pair("k", 1)]));
    println(pp2s(multPolyProds(pp1, pp2)));

    //p1 = Polynom(setTreeValues(makeTree(), [Pair(pp1, Rational(2, 1)), Pair(pp2, Rational(3, 1))]));
    //p2 = Polynom(setTree(makeTree(), pp2, Rational(1,1)));
    
    p1 = Polynom(setTreeValues(makeTree(), [Pair(pp1, 2), Pair(pp2, 3)]));
    p2 = Polynom(setTree(makeTree(), pp2, 1));

    // println("(" + p2s(p1) + ") * (" + p2s(p2) + ")" + " = " + p2s(multPolynoms(p1, p2)));
    // println(rf2s(alg2rf(s2ar("(((x*y)/2) + (y/x))"))));
    // println(rf2s(alg2rf(s2ar("(((((9*x)*x)-4)/((3*x)+2)) - (3*x))"))));
    // println(rf2s(alg2rf(s2ar("((((4*a)*a)-9)*((1/((2*a)-3))-(1/((2*a)+3))))"))));

    println("("+p2s(p1) + ") * ("+p2s(p2)+")" + " = " + p2s(multPolynoms(p1, p2)));
    println(rf2s(alg2rf(s2ar("(((x*y)/2) + (y/x))"))));
    println("(((((9*x)*x)-4)/((3*x)+2)) - (3*x)) = " + rf2s(alg2rf(s2ar("(((((9*x)*x)-4)/((3*x)+2)) - (3*x))"))));
    println("((((4*a)*a)-9)*((1/((2*a)-3))-(1/((2*a)+3)))) = " + rf2s(alg2rf(s2ar("((((4*a)*a)-9)*((1/((2*a)-3))-(1/((2*a)+3))))"))));

    // expr = s2ar("((2+3)+(1*(3+x)))");
    // println(expr);
    
    // expr2 = s2ar("((((-x) * x)*4)/2)");
    // switch(eval(expr2, vars)){
    //     Some(v): println(ar2s(expr2) + " = " + i2s(v));
    //     None(): println("Error");
    // }
    
    // expr3 = s2ar("(((x-2)*(x+(4+y)))/x)");
    // println(ar2s(diff(expr3, "x")));
    // println(ar2s(simplify(simplify(simplify(diff(expr3, "x"))))));
}