nemo_structure = symbol declaration *:d instruction +:b {
    VirtualMachineNemoStructure(:d, :b)
};

declaration = "var" symbol variable :v ":" symbol type:t ";" symbol {
    NemoDeclaration(:v, :t) 
};

type  = int | array;

int = "int" symbol { 
    NemoDeclarationInt()
};

array = "[" symbol type:t "]" symbol {
    NemoDeclarationArr(:t) 
};

int_value = digit+ $s symbol {
    s2i($s)
};

arr_value = "," symbol expression;

instruction = int_value ":" symbol (print | assign | condition);

print = "print" symbol "(" symbol expression :e ")" symbol places: gt { 
    VirtualMachineNemoPrintInstruction(:e, :gt)
};

assign = variable :v ":=" symbol expression :e places :gt symbol  { 
    VirtualMachineNemoAssignInstruction(:v, :e, :gt)
};

condition = "if" symbol "(" symbol expression:e1 cond$s symbol expression:e2 ")" symbol places: pos "else" symbol places: neg { 
    VirtualMachineConditionInstruction($s, :e1, :e2, :pos, :neg)
};

places = "goto" symbol "{" symbol label*:labs "}" symbol {
    :labs 
};

expression = const | un_op | bin_op | apply | update | var | arr;

const  = int_value:v {
    NemoExpressionInt(:v)
};

un_op  = "-" $s symbol expression:e {
    NemoExpressionUnary($s, :e)
};

bin_op = "(" symbol expression:l ("+"|"*"|"/"|"-"|"%") $s symbol expression:r ")" symbol {
    NemoExpressionBinary($s, :l, :r)
};

apply  = "apply" symbol "(" symbol expression:a "," symbol expression:i ")" symbol { 
    NemoExpressionApply(:a, :i)
};

update = "update" symbol "(" symbol expression:a "," symbol expression:i "," symbol expression:v ")" symbol {
    NemoExpressionUpdate(:a, :i, :v)
};

var = variable :v {
    NemoExpressionVar(:v)
};

arr = "[" symbol expression:v1 arr_value*:vs "]" symbol {
    createArray(:v1, :vs)
};

cond = "!=" | "==" | "<=" | ">=" | "<" | ">" ;

variable = letter+ $s symbol {
    $s
};

label = digit+ $s symbol {
    s2i($s)
};

letter = 'a'-'z';
digit  = '0'-'9';
symbol = (' ' | '\t' | '\n' | '\r')*;
